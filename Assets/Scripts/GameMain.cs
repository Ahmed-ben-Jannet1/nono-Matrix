using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

/// <summary>

public class GameMain : MonoBehaviour
{
    public static int DEFAULT_ROW = 10, DEFAULT_COLUMN = 10;

    public int row = DEFAULT_ROW, column = DEFAULT_COLUMN;

    public Grid grid;

    public float rate = 0.5f;

    public static int[,] neo10 = {
        { 0,0,0,0,0,0,0,0,0,0},
        { 0,0,0,1,1,1,1,1,0,0},
        { 0,0,1,0,0,0,0,1,0,0},
        { 0,0,1,1,1,1,1,1,0,0},
        { 0,0,1,1,0,1,1,1,0,0},
        { 0,0,1,0,0,0,0,1,0,0},
        { 0,0,0,1,0,0,1,0,0,0},
        { 0,0,0,1,0,0,1,1,0,0},
        { 0,0,1,1,1,1,1,1,1,0},
        { 0,1,1,1,1,1,1,1,1,1},};

    public static int[,] trinity = {
        { 0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,1,1,1,0,0,0,0 },
        { 0,0,0,0,0,1,1,0,0,0 },
        { 0,0,0,1,1,1,1,0,0,0 },
        { 0,0,1,1,1,0,1,0,0,0 },
        { 0,0,0,0,0,0,1,0,0,0 },
        { 0,0,0,1,0,1,1,0,0,0 },
        { 0,0,0,0,1,1,1,0,0,0 },
        { 0,0,0,1,1,1,1,0,0,0 },
        { 0,0,0,1,1,1,1,1,0,0 },

        };

    public static int[,] morph = {
        { 0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,1,1,1,1,0,0,0 },
        { 0,0,0,1,0,0,1,0,0,0 },
        { 0,0,0,1,1,1,1,0,0,0 },
        { 0,0,0,1,0,0,1,0,0,0 },
        { 0,0,0,1,0,0,1,1,0,0 },
        { 0,0,0,1,1,1,1,1,1,0 },
        { 0,0,1,1,1,1,1,1,1,1 },
        { 0,1,1,1,1,1,1,1,1,1 },

        };

    public static int[,] niobe = {
        { 0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0 },
        { 0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0 },
        { 0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0 },
        { 0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,1,1,1,0,0,1,1,1,1,0,0,0,0,0 },
        { 0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0 },
        { 0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0 },
        { 0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1 },
        { 1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1 },
        { 1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1 },

        };

    public static int[,] smith = {
        { 0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0 },
        { 0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0 },
        { 0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0 },
        { 0,0,0,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0 },
        { 0,0,0,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0 },
        { 0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0 },
        { 0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0 },
        { 0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0 },
        { 0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0 },
        { 0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0 },
        { 0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0 },
        { 0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,0,0 },
        { 0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0 },
        { 0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0 },
        { 0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1 },
        { 0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1 },

        };

    //public int[,] solution;

    //public int[,] 

    void Start()
    {
        if (PlayerPrefs.HasKey("Row"))
            row = PlayerPrefs.GetInt("Row");
        else row = DEFAULT_ROW;

        if (PlayerPrefs.HasKey("Column"))
            column = PlayerPrefs.GetInt("Column");
        else column = DEFAULT_COLUMN;

        int[,] puzzle = {
        { 0,0,0,0,0,0,0,0,0,0},
        { 0,0,0,0,0,0,0,0,0,0},
        { 0,0,0,0,0,0,0,0,0,0},
        { 0,0,0,0,0,0,0,0,0,0},
        { 0,0,0,0,0,0,0,0,0,0},
        { 0,0,0,0,0,0,0,0,0,0},
        { 0,0,0,0,0,0,0,0,0,0},
        { 0,0,0,0,1,1,1,1,0,0},
        { 0,0,0,1,1,1,1,1,1,0},
        { 0,1,1,1,1,1,1,1,1,1},};
            
        int element10 = Random.Range(0, 3);
        int element20 = Random.Range(4, 6);

        if (row == 10)
        {
            switch (element10)
            {
                case 0: puzzle = neo10;
                    break;
                case 1:
                    puzzle = trinity;
                    break;
                case 2:
                    puzzle = morph;
                    break;
            }
        }
        else
        {
            switch (element20)
            {
                case 4:
                    puzzle = niobe;
                    break;
                case 5:
                    puzzle = smith;
                    break;
            }
        }


        if (row == 10 )
        {
            grid.LoadPuzzle(row,column,puzzle,element10);
            grid.playing = true;
        }
        else
        {
            grid.LoadPuzzle(row, column, puzzle, element20);
            grid.playing = true;
        }
    }


}
